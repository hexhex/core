-*- org -*-

* at the moment we have two families of model generators: genuine and non-genuine
  genuine uses GenuineSolver and GenuineGrounder
  non-genuine uses ASPSoftwareManager
* TODO ProgramCtx::idb should become set of IDs and similar for ProgramCtx::idbList, this has implications in other code and plugins!
* TODO use explicit qi headers in include/dlvhex2/HexGrammar.h (and probably in other spirit-using files) to reduce compile time
* TODO unify names of methods in dlvhex::Interpretation, we may want to name the single-bit methods "add" "remove" and "has" (...Fact)
* TODO remove dlvhex::Interpretation::setRegistry because it should not exist, instead fix how affected interpretations are created in first place
* TODO make dlvhex::printManyToString a printer for a const Range with concept check value_type = ID (simplifies a lot of code)
* TODO rewrite EvaluationHeuristicsEasy and then remove ComponentGraph::collapseComponents
* TODO extend ComfortPluginInterface.h (see TODO there)
* TODO make Registry really const-printable (currently we do a const_cast inside the print method)
* TODO think about whether benchmarking should use different mutexes or thread-local storage instead of mutexes
* TODO add some "built-in" testing ext-atoms like &e_1_1[a](X), &e_2_3[a,b](X,Y,Z)
* TODO AC_CONFIG_SUBDIRS([libltdl]) is non-functional with newer autotools
* TODO allow --solver=/path/to/solver?
* TODO consider carefully to put stuff from EvalHeuristicShared.h into EvalHeuristicBase.h
* TODO maintain a bimap between replacement atom predicates and PluginAtom objects
Replacement atoms show up in answer sets, and we have to find the
right PluginAtom. There could be more than one replacement atom for a
single PluginAtom, even for a single rule if we decompose recursive
rules.
* TODO Add support for GraphML
The GraphML could be handy for debugging the dependency graph and
other stuff: <http://graphml.graphdrawing.org/>

Obviously, Boost.Graph has support for it.
* TODO Check if the undecorated external atom replacement and aux names are working
* TODO Fix dawg.hex testcases
This goes in line with GuessCheckModelGenerator: if there are already
solved stratified replacement atoms in the result and there are
unstratified external atoms in the GnC-component, the guessed model
also contains the replacement atoms from the input result, hence
making the check always incompatible with the guess. This need to be
fixed by introducing a better numbering scheme for the replacement
atoms. [PS: probably solved, extatom3.hex now works, however dawg.hex cannot
work as we do not support namespaces]
* TODO use boost iostreams for retrieving URLs/ASPsolver/dlt?
<http://www.boost.org/libs/iostreams/doc/index.html>
mmap'd file(s)?
* TODO Global URI API
Most plugins need URI handling (as well as dlvhex).
* TODO RuleBuilder for all the internal rewriting processes
Make the rewritings explicit through a dedicated rewriting
hierarchy. We need to rewrite in
- the model generators (HO vs. GnC, maybe encode Terms so we do not
  need to send tons of strings...)
- graph builder (though a bit differently: external dependencies)
* TODO Send unknown command line options to dlv?
Handy for passing, e.g., optimization flags to dlv.
* TODO HEX-parser should create metainformation of the program
Like no. of external and HO atoms, aggregates, ...; given this
information, we can effectively choose what parts of dlvhex have to be
instantiated or can be bypassed, i.e., pure dlv programs do not need
the depgraph stuff.
* TODO Complete the dlvhex API (output, intput, ...)
Plugins should behave as passively as possible, i.e., no registration
of data like namespaces or similar information *initiated* from the
plugins.
* TODO Semantics API
Design proper interfaces for different semantics, e.g., HEX, WFS,
etc. Should we allow plugins to add new semantic computations?
* TODO what kind of queries can we push to dlv?
* TODO Magic Set rewriting
and what kind of MS rewriting can be delegated to dlv?
* TODO Add support for RIF BLD presentation syntax
* TODO [Mac OS X] Install user plugins in ~/Library/Application Support/dlvhex/plugins
<http://developer.apple.com/documentation/MacOSX/Conceptual/BPFileSystem/Articles/LibraryDirectory.html>
* TODO [Mac OS X] Add pkg/dmg package support?
<http://developer.apple.com/documentation/CoreFoundation/Conceptual/CFBundles/CFBundles.html>
<http://developer.apple.com/documentation/Porting/Conceptual/PortingUnix/distributing/chapter_9_section_1.html>
* TODO [Linux] Add deb/rpm package support?
* TODO [Windows] Add dll loading support
We may build dlvhex with cygwin; unfortunately, the plugin loading
part is nonfunctional. configure --enable-shared is not working, and
we need to tweak the symbol exporting pragmas.
* TODO How to deal with plugin dependencies?
What's more, how to deal with plugins that are unable to "cooperate,"
e.g., the sparql-plugin is not able to process combined sparql
statements and rules. We could use a major-mode/minor-mode concept
just as in Emacs?

See also
<http://sourceforge.net/mailarchive/message.php?msg_name=c48f89e40802030429h1a8eff67y86403da4b51ee122%40mail.gmail.com>
* TODO Is our rewriting architecture with streams adequate? Can we do better?
* TODO We need to parse things like "10"^^xsd:integer or "foo is not \"bar\""
Symboltable should do back-and-forth translation of dlvhex symbols to
generix dlv symbols. See
<http://spirit.sourceforge.net/distrib/spirit_1_8_5/libs/spirit/doc/symbols.html>.

This is not always possible, for instance, in dlvdb, the program's EDB
is stored in a DBMS, hence the symbol table is delegated to the DBMS.
* TODO dlvhex server mode
inetd (Linux) and launchd (Mac OS X) should be enough:

Add the next line to /etc/services in order to enable the dlvhex
service (we chose port 51966 because it is 0xCAFE in HEX):

dlvhex 51966/tcp

Add this line to /etc/inetd.conf:

dlvhex stream tcp6 nowait  root /usr/local/bin/dlvhex dlvhex --silent --inetd --

(you can use update-inetd on debian/ubuntu)


Launchd setup: <http://developer.apple.com/macosx/launchd.html>


Or maybe as CGI application: (argv[0] == "dlvhex.cgi") => CGI mode.

Or even as an apache module?

Or even a Web Service?
* TODO Describe the testsuite in RDF
See <http://www.w3.org/2001/sw/DataAccess/tests/r2.html>.
